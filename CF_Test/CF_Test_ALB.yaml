AWSTemplateFormatVersion: 2010-09-09

Description: This template creates an Application Load Balancer

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Certificate Arn"
        Parameters:
          - AcmCertificate
      - Label:
          default: "Export Network Stack Name"
        Parameters:
          - ExportNetworkStackName
      - Label:
          default: "Export Security Groups Stack Name"
        Parameters:
          - ExportSGkStackName
      - Label:
          default: "EC2 Parameters"
        Parameters:
          - AmazonImageIDPrivate
          - AmazonImageIDPublic
          - InstanceType
          - KeyName

Parameters:
  AcmCertificate:
    Description: The ARN of the AWS Certification Manager's Certificate
    Type: String

  ExportNetworkStackName:
    Description: The name of the network stack that exports values
    Type: String

  ExportSGtackName:
    Description: The name of the Security Group stack that exports values
    Type: String

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  AmazonImageIDPrivate:
    Description: The ID of the Amazon machine image (AMI) for the private host EC2
    Type: String

  AmazonImageIDPublic:
    Description: The ID of the Amazon machine image (AMI) for the public bastion EC2
    Type: String

Resources:
  #Create an Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyApplicationLoadBalancer
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ExportSGtackName}-ALBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${ExportNetworkStackName}-PublicNetAZ1
        - Fn::ImportValue: !Sub ${ExportNetworkStackName}-PublicNetAZ2

  #Create a Listener on Port 80
  ALBListenerNoSslCertificate:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  #Create a Listener on Port 443
  ALBListenerSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref AcmCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS

  # Create a Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Name: MyWebServers
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${ExportNetworkStackName}-VPCBase

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportNetworkStackName}-PrivateNetAZ1
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportSGtackName}-WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageIDPrivate
      Tags:
        - Key: Name
          Value: EC2 | Private Subnet 1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo su
          yum update -y

  EC2Bastion1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportNetworkStackName}-PublicNetAZ1
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportSGtackName}-SSHSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageIDPublic
      Tags:
        - Key: Name
          Value: EC2 | Bastion 1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo su
          yum update -y

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportNetworkStackName}-PrivateNetAZ2
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportSGtackName}-WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageIDPrivate
      Tags:
        - Key: Name
          Value: EC2 | Private Subnet 2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo su
          yum update -y

  EC2Bastion2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportNetworkStackName}-PublicNetAZ2
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportSGtackName}-SSHSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageIDPublic
      Tags:
        - Key: Name
          Value: EC2 | Bastion 2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo su
          yum update -y

Outputs:
  # Export Target Group
  ALBTargetGroup:
    Description: Webserver target group
    Export:
      Name: !Sub ${AWS::StackName}-ALBTargetGroup
    Value: !Ref ALBTargetGroup

  # Export Application Load Balancer Dns Name
  ApplicationLoadBalancerDnsName:
    Description: Application Load Balancer DNS Name
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  # Export Application Load Balancer Zone ID
  ApplicationLoadBalancerZoneID:
    Description: Application Load Balancer Canonical Hosted Zone ID
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerZoneID
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
