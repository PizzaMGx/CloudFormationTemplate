AWSTemplateFormatVersion: 2010-09-09
Description: >-
  base_network.template - Base VPC, Network, and NAT gateways. Please be aware
  that this template will create resources for which you will be charged.
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Parameters:
          - Environment
        Label:
          default: Basic Configuration
      - Parameters:
          - InstanceTenancy
        Label:
          default:
            - EC2 Configuration
      - Parameters:
          - AvailabilityZoneCount
          - CIDRRange
          - CustomAZList
          - PrivateSubnetAZ1
          - PrivateSubnetAZ2
          - PublicSubnetAZ1
          - PublicSubnetAZ2
          - SecondaryCIDRRange
        Label:
          default:
            - Network Configuration
      - Parameters:
          - CustomDNSList
          - CustomDomainName
        Label:
          default: DHCP Option Set parameters
    ParameterLabels:
      CustomAZList:
        default: Custom AZ List
      SecondaryCIDRRange:
        default: Secondary VPC CIDR Range
      CIDRRange:
        default: What should VPC CIDR Range be?

Parameters:
  CustomAZList:
    Default: ""
    Type: CommaDelimitedList
    Description: >-
      Ordered list of Availability Zones to use for the VPC.  If not provided,
      the full AZ list for the region is used. (OPTIONAL)
  InstanceTenancy:
    Default: default
    ConstraintDescription: >-
      Must be either 'default' for multi-tenant hypervisor or 'dedicated' for
      single tenant hypervisor.
    Type: String
    Description: >-
      VPC default for single tenant (dedicated) vs multi-tenant (default)
      hypervisor. Overrides instance level tenancy option.
    AllowedValues:
      - default
      - dedicated
  AvailabilityZoneCount:
    Default: "2 AZs :: 4 Subnets"
    Type: String
    ConstraintDescription: Must be either 2 or 3.
    Description: Number of Availability Zones (3 AZs needs a use case)
    AllowedValues:
      - "1 AZ :: 2 Subnets"
      - "2 AZs :: 4 Subnets"
      - "3 AZs :: 6 Subnets"
  SecondaryCIDRRange:
    Description: >-
      The secondary IP address space to be used for this VPC, in CIDR notation. 
      (OPTIONAL)
    Default: ""
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x between /16 and /28
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$||^$
    MaxLength: "18"
    Type: String

    # <---Private Subnets CIDR--->
  PrivateSubnetAZ1:
    Type: String
    Description: Private IP subnet used for AZ1.  Default "172.18.0.0/21"
    Default: 172.18.0.0/21
    MinLength: "9"
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: "18"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x

  PrivateSubnetAZ2:
    Type: String
    Description: 'Private IP subnet used for AZ2.  Default "172.18.8.0/21"'
    Default: 172.18.8.0/21
    MinLength: "9"
    AllowedPattern: "^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/[0-9]{1,2}$"
    MaxLength: "18"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
    # <---Private Subnets CIDR--->

  Environment:
    Default: Development
    Type: String
    Description: >-
      Application environment for which this network is being created. e.g.
      Development/Production.
    AllowedValues:
      - Development
      - Integration
      - PreProduction
      - Production
      - QA
      - Staging
      - Test

  # <---Public Subnets CIDR--->
  PublicSubnetAZ1:
    Type: String
    Description: Public IP subnet used for AZ1.  Default "172.18.168.0/22"
    Default: 172.18.168.0/22
    MinLength: "9"
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: "18"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x

  PublicSubnetAZ2:
    Type: String
    Description: 'Public IP subnet used for AZ2.  Default "172.18.172.0/22"'
    Default: 172.18.172.0/22
    MinLength: "9"
    AllowedPattern: "^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/[0-9]{1,2}$"
    MaxLength: "18"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x
  # <---Public Subnets CIDR--->

  CustomDNSList:
    Default: AmazonProvidedDNS
    Type: CommaDelimitedList
    Description: >-
      List of DNS Servers to use for the VPC.  'AmazonProvidedDNS' can be used
      to reference the AWS provided DNS servers. (OPTIONAL)
  CIDRRange:
    Type: String
    Description: "The IP address space to be used for this VPC, in CIDR notation"
    Default: 172.18.0.0/16
    MinLength: "9"
    AllowedPattern: >-
      ^^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/[0-9]{1,2}$
    MaxLength: "18"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x

  VPNGateway:
    Default: "False"
    Type: String
    Description: >-
      Creates a virtual private gateway. A virtual private gateway is the
      VPC-side endpoint for your VPN connection.
    AllowedValues:
      - "True"
      - "False"
  CustomDomainName:
    Default: ""
    Type: String
    Description: >-
      The custom Domain name to use for the VPC.  Leave blank to use the default
      generated domain name.  (OPTIONAL)
  SpokeVpc:
    Default: "False"
    Type: String
    Description: Is this VPN Gateway a spoke of a Transit VPC. (OPTIONAL)
    AllowedValues:
      - "True"
      - "False"
Conditions:
  Create2AZs:
    "Fn::Not":
      - "Fn::Equals":
          - Ref: AvailabilityZoneCount
          - "1 AZ :: 2 Subnets"
  SetCustomDNS:
    "Fn::Not":
      - "Fn::Equals":
          - "Fn::Select":
              - "0"
              - Ref: CustomDNSList
          - ""
  InUsEast1:
    "Fn::Equals":
      - Ref: "AWS::Region"
      - us-east-1
  SetSecondaryCIDR:
    "Fn::Not":
      - "Fn::Equals":
          - Ref: SecondaryCIDRRange
          - ""
  CreateVPNGateway:
    "Fn::Equals":
      - Ref: VPNGateway
      - "True"
  SetCustomDomainName:
    "Fn::Not":
      - "Fn::Equals":
          - Ref: CustomDomainName
          - ""
  Create3AZs:
    "Fn::Equals":
      - Ref: AvailabilityZoneCount
      - "3 AZs :: 6 Subnets"
  SetCustomAZ:
    "Fn::Not":
      - "Fn::Equals":
          - "Fn::Select":
              - "0"
              - Ref: CustomAZList
          - ""
Resources:
  DhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName:
        "Fn::If":
          - SetCustomDomainName
          - Ref: CustomDomainName
          - "Fn::If":
              - InUsEast1
              - ec2.internal
              - "Fn::Sub": "${AWS::Region}.compute.internal"
      DomainNameServers:
        "Fn::If":
          - SetCustomDNS
          - Ref: CustomDNSList
          - - AmazonProvidedDNS
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}DHCPOptionSet"
        - Key: ServiceProvider
          Value: Rackspace
    Metadata:
      "AWS::CloudFormation::Designer":
        id: ed289a3b-79e6-41c5-833e-191461de4656

    # <---VPC--->
  VPCBase:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock:
        Ref: CIDRRange
      EnableDnsSupport: "true"
      InstanceTenancy:
        Ref: InstanceTenancy
      EnableDnsHostnames: "true"
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}VPC"
        - Key: ServiceProvider
          Value: Rackspace
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 6cc3863e-9d13-4c27-ae65-9d020a105c25
    # <---VPC--->

  VGAIGWBase:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: VPCBase
      InternetGatewayId:
        Ref: IGWBase
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 490556e5-79d4-4079-ada4-68bc2f7c060e

  RoutePublicDefault:
    Type: "AWS::EC2::Route"
    Properties:
      GatewayId:
        Ref: IGWBase
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: RouteTablePublic
    DependsOn: VGAIGWBase
    Metadata:
      "AWS::CloudFormation::Designer":
        id: faafa2c5-b7af-4282-84f2-83ee73d62a62

  SecondaryVPCCidrBlock:
    Type: "AWS::EC2::VPCCidrBlock"
    Properties:
      VpcId:
        Ref: VPCBase
      CidrBlock:
        Ref: SecondaryCIDRRange
    Condition: SetSecondaryCIDR
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 11c8dbc3-80d8-442a-a564-baf481fd09c8

  VGAVPNGatewayResource:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: VPCBase
      VpnGatewayId:
        Ref: VPNGatewayResource
    Condition: CreateVPNGateway
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 0644986d-061f-4d2a-8635-82f74edbe4bf

  VPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      VpcId:
        Ref: VPCBase
      DhcpOptionsId:
        Ref: DhcpOptions
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 03175d4c-d6df-4024-8e69-58c89699e49d

    # <---AZ1--->
  EIPNATAZ1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 1c92b51e-2ecf-408f-9e42-ff4798189580

  NATAZ1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId:
        Ref: PublicNetAZ1
      AllocationId:
        "Fn::GetAtt":
          - EIPNATAZ1
          - AllocationId
    DependsOn: VGAIGWBase
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 9de1c7d7-abb1-4723-9952-fbcb1809f5fa

  PrivateNetAZ1:
    Type: "AWS::EC2::Subnet"
    Properties:
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}PrivateAZ1"
        - Key: ServiceProvider
          Value: Rackspace
        - Key: network
          Value: private
      VpcId:
        Ref: VPCBase
      CidrBlock:
        Ref: PrivateSubnetAZ1
      MapPublicIpOnLaunch: "false"
      AvailabilityZone:
        "Fn::Select":
          - "0"
          - "Fn::If":
              - SetCustomAZ
              - Ref: CustomAZList
              - "Fn::GetAZs":
                  Ref: "AWS::Region"
    Metadata:
      "AWS::CloudFormation::Designer":
        id: ee520376-f84a-4895-9ce5-11eba1625355

  NATAZ1Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATAZ1
      RouteTableId:
        Ref: RouteTablePrivateAZ1
    Metadata:
      "AWS::CloudFormation::Designer":
        id: e0314937-43c3-4dcf-95d3-d014ad4e1d6a

  RouteTablePrivateAZ1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPCBase
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}PrivateAZ1RT"
        - Key: ServiceProvider
          Value: Rackspace
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 6f67a2ed-2df0-4156-b2c9-cec2a14bdf42

  RouteAssociationPublicAZ1Default:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: PublicNetAZ1
      RouteTableId:
        Ref: RouteTablePublic
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 5ccb60d1-6fe5-486b-8062-92954542beec
  PublicNetAZ1:
    Type: "AWS::EC2::Subnet"
    Properties:
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}PublicAZ1"
        - Key: ServiceProvider
          Value: Rackspace
      VpcId:
        Ref: VPCBase
      CidrBlock:
        Ref: PublicSubnetAZ1
      MapPublicIpOnLaunch: "true"
      AvailabilityZone:
        "Fn::Select":
          - "0"
          - "Fn::If":
              - SetCustomAZ
              - Ref: CustomAZList
              - "Fn::GetAZs":
                  Ref: "AWS::Region"
    Metadata:
      "AWS::CloudFormation::Designer":
        id: ef7c679d-8de2-41fe-8002-17a1d4a5f5ff

  RouteAssociationPrivateAZ1Default:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: PrivateNetAZ1
      RouteTableId:
        Ref: RouteTablePrivateAZ1
    Metadata:
      "AWS::CloudFormation::Designer":
        id: ee6082c6-212e-4957-9473-803ce389f27c
      # <---AZ1--->

      # <---AZ2--->

  PrivateNetAZ2:
    Type: "AWS::EC2::Subnet"
    Properties:
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Join":
              - ""
              - - "Fn::If":
                    - Create2AZs
                    - Ref: "AWS::NoValue"
                    - DONOTUSE-
                - Ref: "AWS::StackName"
                - PrivateAZ2
        - Key: ServiceProvider
          Value: Rackspace
        - Key: network
          Value: private
      VpcId:
        Ref: VPCBase
      CidrBlock:
        Ref: PrivateSubnetAZ2
      MapPublicIpOnLaunch: "false"
      AvailabilityZone:
        "Fn::Select":
          - "1"
          - "Fn::If":
              - SetCustomAZ
              - Ref: CustomAZList
              - "Fn::GetAZs":
                  Ref: "AWS::Region"

  RouteTablePrivateAZ2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPCBase
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}PrivateAZ2RT"
        - Key: ServiceProvider
          Value: Rackspace

  PublicNetAZ2:
    Type: "AWS::EC2::Subnet"
    Properties:
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Join":
              - ""
              - - "Fn::If":
                    - Create2AZs
                    - Ref: "AWS::NoValue"
                    - DONOTUSE-
                - Ref: "AWS::StackName"
                - PublicAZ2
        - Key: ServiceProvider
          Value: Rackspace
      VpcId:
        Ref: VPCBase
      CidrBlock:
        Ref: PublicSubnetAZ2
      MapPublicIpOnLaunch: "true"
      AvailabilityZone:
        "Fn::Select":
          - "1"
          - "Fn::If":
              - SetCustomAZ
              - Ref: CustomAZList
              - "Fn::GetAZs":
                  Ref: "AWS::Region"

  EIPNATAZ2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    Condition: Create2AZs

  RouteAssociationPrivateAZ2Default:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: PrivateNetAZ2
      RouteTableId:
        Ref: RouteTablePrivateAZ2

  NATAZ2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATAZ2
      RouteTableId:
        Ref: RouteTablePrivateAZ2
    Condition: Create2AZs

  NATAZ2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId:
        Ref: PublicNetAZ2
      AllocationId:
        "Fn::GetAtt":
          - EIPNATAZ2
          - AllocationId
    Condition: Create2AZs
    DependsOn: VGAIGWBase

  RouteAssociationPublicAZ2Default:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: PublicNetAZ2
      RouteTableId:
        Ref: RouteTablePublic

      # <---AZ2--->
  VPNGatewayResource:
    Type: "AWS::EC2::VPNGateway"
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}VPC"
        - Key: ServiceProvider
          Value: Rackspace
        - Key: "transitvpc:spoke"
          Value:
            Ref: SpokeVpc
    Condition: CreateVPNGateway
    Metadata:
      "AWS::CloudFormation::Designer":
        id: e493c3b9-b9a7-459d-b129-41751b3e41b0
  IGWBase:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}IGW"
        - Key: ServiceProvider
          Value: Rackspace
    Metadata:
      "AWS::CloudFormation::Designer":
        id: edd674ec-e73d-4962-8b40-c2031ddab8c8
  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: VPCBase
      Tags:
        - Key: Environment
          Value:
            Ref: Environment
        - Key: Name
          Value:
            "Fn::Sub": "${AWS::StackName}PublicRT"
        - Key: ServiceProvider
          Value: Rackspace
    Metadata:
      "AWS::CloudFormation::Designer":
        id: be4021b6-8dae-49ef-a689-6fd94b9bf766
  VPNRoutePropagation:
    Type: "AWS::EC2::VPNGatewayRoutePropagation"
    Properties:
      RouteTableIds:
        - Ref: RouteTablePublic
        - Ref: RouteTablePrivateAZ1
        - Ref: RouteTablePrivateAZ2
        - "Fn::If":
            - Create3AZs
            - Ref: RouteTablePrivateAZ3
            - Ref: "AWS::NoValue"
      VpnGatewayId:
        Ref: VPNGatewayResource
    Condition: CreateVPNGateway
    DependsOn: VGAVPNGatewayResource
    Metadata:
      "AWS::CloudFormation::Designer":
        id: 98da5662-cebf-44e5-b1f4-ddd12e711749

Outputs:
  VPCID:
    Value:
      Ref: VPCBase
  SubnetPrivateAZ3:
    Condition: Create3AZs
    Value:
      Ref: PrivateNetAZ3
  SubnetPrivateAZ2:
    Value:
      Ref: PrivateNetAZ2
  SubnetPrivateAZ1:
    Value:
      Ref: PrivateNetAZ1
  SubnetPublicAZ3:
    Condition: Create3AZs
    Value:
      Ref: PublicNetAZ3
  PrivateSubnets:
    Value:
      "Fn::Join":
        - ","
        - - Ref: PrivateNetAZ1
          - Ref: PrivateNetAZ2
          - "Fn::If":
              - Create3AZs
              - Ref: PrivateNetAZ3
              - Ref: "AWS::NoValue"
  Environment:
    Value:
      Ref: Environment
  CIDRRange:
    Value:
      Ref: CIDRRange
  SubnetPublicAZ1:
    Value:
      Ref: PublicNetAZ1
  Subnets:
    Value:
      "Fn::Join":
        - ","
        - - Ref: PrivateNetAZ1
          - Ref: PrivateNetAZ2
          - "Fn::If":
              - Create3AZs
              - Ref: PrivateNetAZ3
              - Ref: "AWS::NoValue"
          - Ref: PublicNetAZ1
          - Ref: PublicNetAZ2
          - "Fn::If":
              - Create3AZs
              - Ref: PublicNetAZ3
              - Ref: "AWS::NoValue"
  SubnetPublicAZ2:
    Value:
      Ref: PublicNetAZ2
  PublicSubnets:
    Value:
      "Fn::Join":
        - ","
        - - Ref: PublicNetAZ1
          - Ref: PublicNetAZ2
          - "Fn::If":
              - Create3AZs
              - Ref: PublicNetAZ3
              - Ref: "AWS::NoValue"
  DefaultSG:
    Value:
      "Fn::GetAtt":
        - VPCBase
        - DefaultSecurityGroup
  VPNGateway:
    Value:
      Ref: VPNGatewayResource
    Condition: CreateVPNGateway
  RouteTablePrivateAZ1:
    Value:
      Ref: RouteTablePrivateAZ1
  RouteTablePrivateAZ3:
    Condition: Create3AZs
    Value:
      Ref: RouteTablePrivateAZ3
  RouteTablePrivateAZ2:
    Value:
      Ref: RouteTablePrivateAZ2
  ElasticIP1:
    Value:
      Ref: EIPNATAZ1
  ElasticIP2:
    Condition: Create2AZs
    Value:
      Ref: EIPNATAZ2
  ElasticIP3:
    Condition: Create3AZs
    Value:
      Ref: EIPNATAZ3
  RouteTablePublic:
    Value:
      Ref: RouteTablePublic
  CidrBlockAssociations:
    Value:
      "Fn::Join":
        - ","
        - "Fn::GetAtt":
            - VPCBase
            - CidrBlockAssociations
    Condition: SetSecondaryCIDR
  RouteTables:
    Value:
      "Fn::Join":
        - ","
        - - Ref: RouteTablePublic
          - Ref: RouteTablePrivateAZ1
          - Ref: RouteTablePrivateAZ2
          - "Fn::If":
              - Create3AZs
              - Ref: RouteTablePrivateAZ3
              - Ref: "AWS::NoValue"
